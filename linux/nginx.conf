
#user  nobody;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
stream {
    upstream qjg {
            server 192.168.100.233:8088;
    }

    server {
            listen 8088;
            proxy_connect_timeout 60s;
            proxy_timeout 60s;
            proxy_pass qjg;
    }
}

events {
    worker_connections  65535;
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

     gzip  on;
     gzip_min_length 10K;
     gzip_comp_level 8;
	 gzip_buffers 4 800k; 
     gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	 #gzip_vary on
	 #IE6对Gzip不怎么友好，不给它Gzip了
     gzip_disable "MSIE [1-6]\.";
	 proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;
	# brotli
     brotli on;
     brotli_comp_level 6;
     brotli_buffers 16 8k;
     brotli_min_length 20;
	 brotli_window 512k;
     brotli_types  text/plain text/javascript text/css text/xml text/x-component application/javascript application/x-javascript application/xml application/json application/xhtml+xml application/rss+xml application/atom+xml application/x-font-ttf application/vnd.ms-fontobject image/svg+xml image/x-icon image/jpeg image/gif image/png font/opentype;
     brotli_static  always;
	 open_file_cache max=2000 inactive=20s;
     open_file_cache_valid 60s;
     open_file_cache_min_uses 5;
     open_file_cache_errors off;
	server {
        server_name www.okai360.com;
        #charset koi8-r;
        listen 443 ssl;
        #配置HTTPS的默认访问端口为443。
        #access_log  logs/host.access.log  main;
        root /usr/local/target/web/wwjh5/; 
        index index.html index.htm;
		ssl_certificate /usr/local/nginx/conf/cert/www.okai360.com.pem ; #需要将cert-file-name.pem替换成已上传的证书文件的名称。
        ssl_certificate_key /usr/local/nginx/conf/cert/www.okai360.com.key; #需要将cert-file-name.key替换成已上传的证书私钥文件的名称。
        ssl_session_timeout 5m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        #表示使用的加密套件的类型。
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的TLS协议的类型。
        ssl_prefer_server_ciphers on;
		location / {
        root /usr/local/target/web/wwjh5/;   #Web网站程序存放目录。
        index index.html index.htm;
        }		
	   }	
 server {
		# 二级域名的SSL配置
        listen       443 ssl;
		# 注意这里域名改写成自己的域名!!!
        server_name  wwjbase.okai360.com; 
		#证书文件名称 注意证书的放置位置
        ssl_certificate /usr/local/nginx/conf/cert/wwjbase.okai360.com.pem ;
        #私钥文件名称
        ssl_certificate_key /usr/local/nginx/conf/cert/wwjbase.okai360.com.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  5m;
	    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	    ssl_prefer_server_ciphers on;
        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;
		location / {
            #nginx反向代理默认配置
            #避免多个二级域名（同样的公网IP）绑定多个端口ngnix反向代理不了的问题
	        proxy_set_header X-Real-IP $remote_addr;
	        proxy_set_header Host $http_host;
            #目的转发端口（应用程序进程所绑定的IP及端口号）
            proxy_pass http://127.0.0.1:8060;
            #默认配置
            proxy_redirect off;
            break;
        }	
        error_page 404 /404.html;
            location = /40x.html {
        }
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
 server {
		# 二级域名的SSL配置
        listen       443 ssl;
		# 注意这里域名改写成自己的域名!!!
        server_name  wwjdevice.okai360.com; 
		#证书文件名称 注意证书的放置位置
        ssl_certificate /usr/local/nginx/conf/cert/wwjdevice.okai360.com.pem ;
        #私钥文件名称
        ssl_certificate_key /usr/local/nginx/conf/cert/wwjdevice.okai360.com.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  5m;
	    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	    ssl_prefer_server_ciphers on;
        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;
		location / {
            #nginx反向代理默认配置
            #避免多个二级域名（同样的公网IP）绑定多个端口ngnix反向代理不了的问题
	        proxy_set_header X-Real-IP $remote_addr;
	        proxy_set_header Host $http_host;
            #目的转发端口（应用程序进程所绑定的IP及端口号）
            proxy_pass http://127.0.0.1:8061;
            #默认配置
            proxy_redirect off;
            break;
        }	
        error_page 404 /404.html;
            location = /40x.html {
        }
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
 server {
        listen      80 ;       
        server_name wwjbase.okai360.com;       
        #配置HTTPS的默认访问端口为443。
        #access_log  logs/host.access.log  main;
		rewrite ^/.*$ https://wwjbase.okai360.com permanent; #将所有HTTP请求通过rewrite指令重定向到HTTPS。
    }
 server {
        listen      80 ;      
        server_name wwjdevice.okai360.com;       
        #配置HTTPS的默认访问端口为443。
        #access_log  logs/host.access.log  main;
		rewrite ^/.*$ https://wwjdevice.okai360.com permanent; #将所有HTTP请求通过rewrite指令重定向到HTTPS。       
    }	
    server {
        listen      80 ;
        #listen      [::]:80 default_server  ;# 服务器地址
        server_name www.okai360.com;
        #charset koi8-r;   
        #配置HTTPS的默认访问端口为443。
        #access_log  logs/host.access.log  main;
		rewrite ^/.*$ https://www.okai360.com permanent; #将所有HTTP请求通过rewrite指令重定向到HTTPS。
        location / {
           try_files $uri $uri/ /index.html ;
           #root   /usr/local/java/apache-tomcat-9.0.35/webapps/ROOT/;
           root /usr/local/target/web/wwjh5/; 
           #root   html 
           index  index.html index.htm;
		   expires 24h;
		   autoindex on;
		   charset utf-8;
        }
       	
	  location /v2b {
           try_files $uri $uri/ /index.php ;          
           root /www/wwwroot/ceshi/public/;           
           index  index.php index.htm;
		   expires 24h;
		   autoindex on;
		   charset utf-8;
        }     
    }
server {       
        listen       8080;
        server_name  baseapi;	
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
		     #root /usr/local/java/vue/wwjweb;
             #try_files $uri $uri/ @router;
             #index index.html index.htm;
             proxy_pass   http://127.0.0.1:8060;
        }       
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }       
    }
server {       
        listen       8081;
        server_name  deviceapi;	
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
		     #root /usr/local/java/vue/wwjweb;
             #try_files $uri $uri/ @router;
             #index index.html index.htm;
             proxy_pass   http://127.0.0.1:8061;
        }       
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }       
    } 	
}
